// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import client "github.com/tendermint/tendermint/rpc/client"
import common "github.com/tendermint/tendermint/libs/common"
import context "context"
import core_types "github.com/tendermint/tendermint/rpc/core/types"
import log "github.com/tendermint/tendermint/libs/log"
import mock "github.com/stretchr/testify/mock"
import pubsub "github.com/tendermint/tendermint/libs/pubsub"
import types "github.com/tendermint/tendermint/types"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ABCIInfo provides a mock function with given fields:
func (_m *Client) ABCIInfo() (*core_types.ResultABCIInfo, error) {
	ret := _m.Called()

	var r0 *core_types.ResultABCIInfo
	if rf, ok := ret.Get(0).(func() *core_types.ResultABCIInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultABCIInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ABCIQuery provides a mock function with given fields: path, data
func (_m *Client) ABCIQuery(path string, data common.HexBytes) (*core_types.ResultABCIQuery, error) {
	ret := _m.Called(path, data)

	var r0 *core_types.ResultABCIQuery
	if rf, ok := ret.Get(0).(func(string, common.HexBytes) *core_types.ResultABCIQuery); ok {
		r0 = rf(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultABCIQuery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, common.HexBytes) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ABCIQueryWithOptions provides a mock function with given fields: path, data, opts
func (_m *Client) ABCIQueryWithOptions(path string, data common.HexBytes, opts client.ABCIQueryOptions) (*core_types.ResultABCIQuery, error) {
	ret := _m.Called(path, data, opts)

	var r0 *core_types.ResultABCIQuery
	if rf, ok := ret.Get(0).(func(string, common.HexBytes, client.ABCIQueryOptions) *core_types.ResultABCIQuery); ok {
		r0 = rf(path, data, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultABCIQuery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, common.HexBytes, client.ABCIQueryOptions) error); ok {
		r1 = rf(path, data, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Block provides a mock function with given fields: height
func (_m *Client) Block(height *int64) (*core_types.ResultBlock, error) {
	ret := _m.Called(height)

	var r0 *core_types.ResultBlock
	if rf, ok := ret.Get(0).(func(*int64) *core_types.ResultBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockResults provides a mock function with given fields: height
func (_m *Client) BlockResults(height *int64) (*core_types.ResultBlockResults, error) {
	ret := _m.Called(height)

	var r0 *core_types.ResultBlockResults
	if rf, ok := ret.Get(0).(func(*int64) *core_types.ResultBlockResults); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBlockResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainInfo provides a mock function with given fields: minHeight, maxHeight
func (_m *Client) BlockchainInfo(minHeight int64, maxHeight int64) (*core_types.ResultBlockchainInfo, error) {
	ret := _m.Called(minHeight, maxHeight)

	var r0 *core_types.ResultBlockchainInfo
	if rf, ok := ret.Get(0).(func(int64, int64) *core_types.ResultBlockchainInfo); ok {
		r0 = rf(minHeight, maxHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBlockchainInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(minHeight, maxHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadcastTxAsync provides a mock function with given fields: tx
func (_m *Client) BroadcastTxAsync(tx types.Tx) (*core_types.ResultBroadcastTx, error) {
	ret := _m.Called(tx)

	var r0 *core_types.ResultBroadcastTx
	if rf, ok := ret.Get(0).(func(types.Tx) *core_types.ResultBroadcastTx); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBroadcastTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadcastTxCommit provides a mock function with given fields: tx
func (_m *Client) BroadcastTxCommit(tx types.Tx) (*core_types.ResultBroadcastTxCommit, error) {
	ret := _m.Called(tx)

	var r0 *core_types.ResultBroadcastTxCommit
	if rf, ok := ret.Get(0).(func(types.Tx) *core_types.ResultBroadcastTxCommit); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBroadcastTxCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadcastTxSync provides a mock function with given fields: tx
func (_m *Client) BroadcastTxSync(tx types.Tx) (*core_types.ResultBroadcastTx, error) {
	ret := _m.Called(tx)

	var r0 *core_types.ResultBroadcastTx
	if rf, ok := ret.Get(0).(func(types.Tx) *core_types.ResultBroadcastTx); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBroadcastTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: height
func (_m *Client) Commit(height *int64) (*core_types.ResultCommit, error) {
	ret := _m.Called(height)

	var r0 *core_types.ResultCommit
	if rf, ok := ret.Get(0).(func(*int64) *core_types.ResultCommit); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Genesis provides a mock function with given fields:
func (_m *Client) Genesis() (*core_types.ResultGenesis, error) {
	ret := _m.Called()

	var r0 *core_types.ResultGenesis
	if rf, ok := ret.Get(0).(func() *core_types.ResultGenesis); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultGenesis)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRunning provides a mock function with given fields:
func (_m *Client) IsRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnReset provides a mock function with given fields:
func (_m *Client) OnReset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStart provides a mock function with given fields:
func (_m *Client) OnStart() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStop provides a mock function with given fields:
func (_m *Client) OnStop() {
	_m.Called()
}

// Quit provides a mock function with given fields:
func (_m *Client) Quit() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *Client) Reset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Client) SetLogger(_a0 log.Logger) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields:
func (_m *Client) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Client) Status() (*core_types.ResultStatus, error) {
	ret := _m.Called()

	var r0 *core_types.ResultStatus
	if rf, ok := ret.Get(0).(func() *core_types.ResultStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Client) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Client) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, subscriber, query, out
func (_m *Client) Subscribe(ctx context.Context, subscriber string, query pubsub.Query, out chan<- interface{}) error {
	ret := _m.Called(ctx, subscriber, query, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pubsub.Query, chan<- interface{}) error); ok {
		r0 = rf(ctx, subscriber, query, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tx provides a mock function with given fields: hash, prove
func (_m *Client) Tx(hash []byte, prove bool) (*core_types.ResultTx, error) {
	ret := _m.Called(hash, prove)

	var r0 *core_types.ResultTx
	if rf, ok := ret.Get(0).(func([]byte, bool) *core_types.ResultTx); ok {
		r0 = rf(hash, prove)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, bool) error); ok {
		r1 = rf(hash, prove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxSearch provides a mock function with given fields: query, prove, page, perPage
func (_m *Client) TxSearch(query string, prove bool, page int, perPage int) (*core_types.ResultTxSearch, error) {
	ret := _m.Called(query, prove, page, perPage)

	var r0 *core_types.ResultTxSearch
	if rf, ok := ret.Get(0).(func(string, bool, int, int) *core_types.ResultTxSearch); ok {
		r0 = rf(query, prove, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultTxSearch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, int, int) error); ok {
		r1 = rf(query, prove, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: ctx, subscriber, query
func (_m *Client) Unsubscribe(ctx context.Context, subscriber string, query pubsub.Query) error {
	ret := _m.Called(ctx, subscriber, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pubsub.Query) error); ok {
		r0 = rf(ctx, subscriber, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnsubscribeAll provides a mock function with given fields: ctx, subscriber
func (_m *Client) UnsubscribeAll(ctx context.Context, subscriber string) error {
	ret := _m.Called(ctx, subscriber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validators provides a mock function with given fields: height
func (_m *Client) Validators(height *int64) (*core_types.ResultValidators, error) {
	ret := _m.Called(height)

	var r0 *core_types.ResultValidators
	if rf, ok := ret.Get(0).(func(*int64) *core_types.ResultValidators); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultValidators)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
